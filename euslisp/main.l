#!/usr/bin/env roseus

(defun init-pr2-imitator (&key (imitation nil) (device :vive))
  (require :pr2-interface "package://pr2eus/pr2-interface.l")
  (require :pr2-vive-interface "package://eus_imitation/euslisp/pr2-vive-interface.l")
  (require :pr2-spacenav-interface "package://eus_imitation/euslisp/pr2-spacenav-interface.l")
  (pr2-init)
  (objects (list *pr2*))
  (cond ((eq device :vive)
         (setq *imitator* (instance pr2-vive-interface :init :imitation imitation :device device)))
        ((eq device :spacenav)
         (setq *imitator* (instance pr2-spacenav-interface :init :imitation imitation :device device)))
        (t (format t "device ~a is not supported." device)))
  (send *imitator* :ros-init))

(defun init-fetch-imitator (&key (imitation nil) (device :vive))
  (require :fetch-interface "package://fetcheus/fetch-interface.l")
  (require :fetch-vive-interface "package://eus_imitation/euslisp/fetch-vive-interface.l")
  (require :fetch-spacenav-interface "package://eus_imitation/euslisp/fetch-spacenav-interface.l")
  (fetch-init)
  (objects (list *fetch*))
  (cond ((eq device :vive)
         (setq *imitator* (instance fetch-vive-interface :init :imitation imitation :device device)))
        ((eq device :spacenav)
         (setq *imitator* (instance fetch-spacenav-interface :init :imitation imitation :device device)))
        (t (format t "device ~a is not supported." device)))
  (send *imitator* :ros-init))

(defun init-baxter-imitator (&key (imitation nil) (device :spacenav))
  (require :baxter-interface "package://baxtereus/baxter-interface.l")
  (require :baxter-spacenav-interface "package://eus_imitation/euslisp/baxter-spacenav-interface.l")
  (baxter-init)
  (objects (list *baxter*))
  (cond ((eq device :spacenav)
         (setq *imitator* (instance baxter-spacenav-interface :init :imitation imitation :device device)))
        (t (format t "device ~a is not supported." device)))
  (send *imitator* :ros-init))

(defun init-kinova-imitator (&key (imitation nil) (device :spacenav))
  (require :kinovaeus "package://kinovaeus/kinova-interface.l")
  (require :kinova-spacenav-interface "package://eus_imitation/euslisp/kinova-spacenav-interface.l")
  (kinova-init :type :gen3_robotiq_2f_140)
  (objects (list *kinova*))
  (cond ((eq device :spacenav)
         (setq *imitator* (instance kinova-spacenav-interface :init :imitation imitation :device device)))
        (t (format t "device ~a is not supported." device)))
  (send *imitator* :ros-init))

(defun main (&key (robot :pr2) (imitation nil) (device :vive))
  (cond ((eq robot :pr2)
         (init-pr2-imitator :imitation imitation :device device))
        ((eq robot :fetch)
         (init-fetch-imitator :imitation imitation :device device))
        ((eq robot :baxter)
         (init-baxter-imitator :imitation imitation :device device))
        ((eq robot :kinova)
         (init-kinova-imitator :imitation imitation :device device))
        (t (format t "robot ~a is not supported." robot)))
  (send *imitator* :main-loop :imitation imitation))
